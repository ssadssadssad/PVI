1) способы внерения зависимостей (три)
constructor injection: все зависимости передаются через конструктор класса.
setter injection: разработчик добавляет setter-метод, с помощью которого инжектор внедряет зависимость
interface injection: зависимость предоставляет инжектору метод, с помощью которого инжектор передаст зависимость. 
Разработчики должны реализовать интерфейс, предоставляющий setter-метод, который принимает зависимости

2) шаблонизированные и стандартные хелперы
Кроме стандартных html-хелперов, рассмотренных в прошлой главе и генерирующих определенные элементы разметки html, 
фреймворк MVC также имеет шаблонные (также называют шаблонизированные) хелперы. Зачем они нужны? 
Они более гибки по сравнению с html-хелперами, так как в этом случае нам не надо думать, какой нам надо создать элемент разметки 
и какой для этого выбрать хелпер. Мы просто сообщаем шаблонному хелперу, какое свойство модели мы хотим использовать, 
а фреймворк уже сам выбирает, какой html-элемент сгенерировать, исходя из типа свойства и его метаданных.
Display
Создает элемент разметки, который доступен только для чтения
DisplayFor
Строго типизированный аналог хелпера Display
Editor
Создает элемент разметки, который доступен для редактирования
ЕditorFor
Строго типизированный аналог хелпера Editor
DisplayText
Создает выражение для указанного свойства модели в виде простой строки
DisplayTextFor
Строго типизированный аналог хелпера DisplayText
DisplayForModel
Создает поля для чтения для всех свойств модели
EditorForModel
Создает поля для редактирования для всех свойств модели

Standard HTML helpers are used to render the most common type of HTML controls like Label,TextBox, Password, TextArea, CheckBox, RadioButtion, 
DropDownList, Listbox,Display,Editor and ActionLink etc.
HTML helpers always start with @HTML. Ther are an object of Html helper class.@ symbol used to access the server-side code. 

3) метаданные
Как уже было показано, шаблонизированным вспомогательным методам ничего не известно о приложении и типах данных модели, 
поэтому часто получается не та HTML-разметка, которая ожидалась. 
К счастью, шаблонизированные вспомогательные методы можно усовершенствовать с помощью метаданных модели, предоставив руководство о том, как обрабатывать типы модели.
Метаданные выражаются с использованием атрибутов C#, при этом атрибуты и значения параметров обеспечивают широкий диапазон инструкций для вспомогательных методов представлений. 
Метаданные применяются к классу модели, который вспомогательные методы просматривают при генерации HTML-элементов. 
Использовать метаданные для предоставления указаний вспомогательным методам в отношении меток, форм отображения и редакторов.

4) условная привязка
осуществлять привязку по какому-то условию, пока не будет выполнено условие, то не будет выполнена привязка


