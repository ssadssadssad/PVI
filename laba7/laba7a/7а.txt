1) отличие сервиса от апи
Веб-сервис: 
Он поддерживает XML.
Вам нужен протокол SOAP для отправки или получения данных по сети. Поэтому он не имеет легкой архитектуры.
Он может использоваться любым клиентом, который понимает XML.
Веб-сервис использует три стиля: REST, SOAP и XML-RPC для связи.	
Он обеспечивает поддержку только для протокола HTTP.

API:
Ответы форматируются с использованием MediaTypeFormatter Web API в XML, JSON или любой другой заданный формат.
API имеет легковесную архитектуру.
Может использоваться клиентом, который понимает JSON или XML.
API можно использовать для любого стиля общения.
Он обеспечивает поддержку протокола HTTP / s: заголовки запроса / ответа URL и т. Д.

2) принцип построения рест
Отделения клиента от сервера
Отсутствие записи состояния клиента (Stateless)
Кэшируемость
Единство интерфейса
Многоуровневость системы
Предоставление кода по запросу
Начало от нуля.

3) рестфул
REST API — это способ взаимодействия сайтов и веб-приложений с сервером. Его также называют RESTful.
API — это код, который позволяет двум приложениям обмениваться данными с сервера. 
На русском языке его принято называть программным интерфейсом приложения. 
REST — это способ создания API с помощью протокола HTTP. На русском его называют «передачей состояния представления».
Технологию REST API применяют везде, где пользователю сайта или веб-приложения нужно предоставить данные с сервера. 
Принципы REST API:
Отделения клиента от сервера
Отсутствие записи состояния клиента (Stateless)
Кэшируемость
Единство интерфейса
Многоуровневость системы
Предоставление кода по запросу
Начало от нуля. (Клиент знает только одну точку входа на сервер. Дальнейшие возможности по взаимодействию обеспечиваются сервером.)

Принципы позволяют выстраивать серверную архитектуру с помощью других протоколов: HTTP, URL, JSON и XML.
REST API основывается на протоколе передачи гипертекста HTTP

Стандарты:
использовать HTTPS;
применять надежный метод аутентификации;
пользоваться CORS для ограничения вызовов на стороне клиента конкретными доменами;
обеспечить минимальную функциональность — не создавать опции DELETE, которые не требуются;
проверить все URL конечной точки и данные тела (body);
избегать выставления токенов API в клиентском JavaScript;
заблокировать доступ с неизвестных доменов или IP-адресов;
блокировать неожиданно большие полезные нагрузки;
ограничивать скорость для запросов, использующих один и тот же токен REST API или IP-адрес;
настраивать ответы в соответствии с кодом состояния HTTP и кэшированием заголовка;
регистрировать запросы и мониторить сбои.

Лучше всего архитектура REST API видна в запросе веб-службы. Из чего она состоит:
URL-адрес конечной точки;
метод HTTP;
заголовки HTTP;
данные тела (body).